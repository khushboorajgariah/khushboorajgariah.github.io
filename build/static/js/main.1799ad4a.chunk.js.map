{"version":3,"sources":["views/home/reducer.js","app/reducers.js","app/store.js","components/TitleBar/index.js","components/modal/index.js","utils/dateUtil.js","views/home/actions.js","views/home/home.js","app/App.js","serviceWorker.js","index.js"],"names":["defaultState","selectedTab","reducers","combineReducers","home","state","arguments","length","undefined","action","type","Object","objectSpread","campaigns","payload","middlewares","push","promise","thunkMiddleware","middleware","applyMiddleware","apply","store","createStore","TitleBar","props","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props","tabList","react_default","a","createElement","className","src","Component","Modal","_this","reactjs_popup_es","trigger","modal","closeOnDocumentClick","close","onClick","header","content","DateUtil","formatIntoTimeAgo","milliseconds","Math","abs","moment","diff","fromNow","actions","getAllCampaigns","name","region","createdOn","price","csv","report","Home","campaign","react","modal_Modal","_this$props$home$camp","map","renderStaticColumns","renderTableRows","TitleBar_TitleBar","renderTable","connect","dispatch","App","es","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1799ad4a.chunk.js","sourcesContent":["let defaultState = {\n    selectedTab: 'CARD'\n};\n\nexport default (state = defaultState, action={}) => {\n    switch (action.type) {\n        case 'GET_ALL_CAMPAIGNS': {\n            return {...state, campaigns: action.payload}\n        }\n        default: return state;\n    }\n};\n","import { combineReducers } from \"redux\"\nimport homeReducer from '../views/home/reducer'\n\n/**\n * Defines mapping of individual view reducers to global state object.\n *\n * Every time a new view is created, entry for that view's reducer is required here.\n *\n * @type {Reducer<any>}\n */\nexport const reducers = combineReducers({\n    home: homeReducer\n});","import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\nimport * as thunkMiddleware from \"redux-thunk\";\nimport promise from \"redux-promise-middleware\";\nimport { reducers } from \"./reducers\";\n\n/**\n *  This defines base configuration for setting up redux with react.\n *  All the middlewares are defined here and base store is created for provider.\n */\n\nlet middlewares = [];\n\n//for promises, since we are using axios for networking\nmiddlewares.push(promise());\n\n//for async operations, network calls\nmiddlewares.push(thunkMiddleware.default);\n\n//smart console logging of actions\nif (process.env.NODE_ENV !== \"production\") {\n    middlewares.push(logger);\n}\n\n// apply middlewares\nlet middleware = applyMiddleware(...middlewares);\n\n// create store\nconst store = createStore(reducers, middleware);\n\n// export\nexport { store };","import React, { Component } from 'react';\nimport './index.css';\nimport {commonConstants} from \"../../constants\";\n\nexport default class TitleBar extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        let { tabList, selectedTab } = this.props;\n\n        return (\n            <div className={'title-bar'}>\n                <div>\n                    <img className={'logo'} src={'/images/logo.png'}/>\n                    <div className={'app-version inline-block'}>BETA</div>\n                </div>\n            </div>\n            )\n    }\n\n};\n","import React, { Component } from 'react';\nimport './index.css';\nimport Popup from \"reactjs-popup\";\n\nexport default class Modal extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        return(\n            <div className=\"popup\">\n                <Popup trigger={this.props.trigger}\n                       modal={true}\n                       closeOnDocumentClick={true}>\n                    {close => (\n                        <div className=\"modal\">\n                            <a className=\"close\"  onClick={()=> {\n                                close()\n                            }}>\n                                &times;\n                            </a>\n                            {(() => {\n                                if(!this.props.header) return;\n                                return <div className=\"popup-header\">\n                                    {this.props.header}\n                                </div>\n                            })()}\n                            <div className=\"popup-content\">\n                                {this.props.content}\n                            </div>\n                        </div>\n                    )}\n                </Popup>\n            </div>\n        )\n    }\n};\n","import moment from 'moment'\n\nconst formatIntoTimeAgo = (milliseconds) => {\n    if (Math.abs(moment().diff(milliseconds)) < 25000) {\n        return 'just now';\n    }\n    return moment(milliseconds).fromNow(true) + ' ago';\n};\n\nconst DateUtil = {\n    formatIntoTimeAgo: formatIntoTimeAgo\n};\n\nexport default DateUtil;","const actions = {\n    getAllCampaigns: () => {\n        let dummyResponse = [\n            {\n                name: 'Test Whatsapp',\n                region: 'US',\n                createdOn: 1559807714999,\n                price: 'Price info of Test Whatsapp',\n                csv: 'Some CSV link for Whatsapp',\n                report: 'Some report link for Whatsapp'\n            },\n            {\n                name: 'Super Jewels Quest',\n                region: 'CA, FR',\n                createdOn: 1559806715124,\n                price: 'Price info of Super Jewels Quest',\n                csv: 'Some CSV link for Super Jewels Quest',\n                report: 'Some report link for Super Jewels Ques'\n            },\n            {\n                name: 'Mole Slayer',\n                region: 'FR',\n                createdOn: 1559806711124,\n                price: 'Price info of Mole Slayer',\n                csv: 'Some CSV link for Mole Slayer',\n                report: 'Some report link for Mole Slayer'\n            },\n            {\n                name: 'Mancala Mix',\n                region: 'JP',\n                createdOn: 1559806680124,\n                price: 'Price info of Mancala Mix',\n                csv: 'Some CSV link for Mancala Mix',\n                report: 'Some report link for Mancala Mix'\n            }\n        ];\n\n        return {\n            type: 'GET_ALL_CAMPAIGNS',\n            payload: dummyResponse\n        }\n    }\n};\n\nexport default actions;","import React, { Component, Fragment as F } from 'react';\nimport { connect } from 'react-redux';\nimport TitleBar from \"../../components/TitleBar/index\";\nimport Modal from \"../../components/modal/index\";\nimport {commonConstants} from \"../../constants\";\nimport DateUtil from '../../utils/dateUtil'\nimport actions from './actions'\nimport './home.css'\n\nclass Home extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillMount() {\n        this.props.getAllCampaigns();\n    }\n\n    renderStaticColumns(campaign) {\n        let { name, price, csv, report } = campaign;\n        return (\n            <F>\n                <td>\n                    <Modal trigger={<div>View Pricing</div>} content={<div><h4>{name}</h4><h5>{price}</h5></div>}/>\n                </td>\n                <td>\n                    <Modal trigger={<div className={'inline-block'}>CSV</div>} content={<div><h4>{name}</h4><h5>{csv}</h5></div>}/>\n                    <Modal trigger={<div className={'inline-block'}>Report</div>} content={<div><h4>{name}</h4><h5>{report}</h5></div>}/>\n                    <Modal trigger={<div className={'inline-block'}>Schedule Again</div>} content={<div><h4>{name}</h4><h5>{price}</h5></div>}/>\n                </td>\n            </F>\n        )\n    }\n\n    renderTableRows() {\n        let { campaigns = [] } = this.props.home;\n\n        return campaigns.map((campaign) => {\n            let { createdOn, name, region } = campaign;\n            return (\n                <tr>\n                    <td>{DateUtil.formatIntoTimeAgo(createdOn)}</td>\n                    <td>\n                        <div>{name}</div>\n                        <div>{region}</div>\n                    </td>\n                    {this.renderStaticColumns(campaign)}\n                </tr>\n            )\n        })\n    }\n    renderTable() {\n        return (\n            <table>\n                <thead>\n                    <tr>\n                        <th>DATE</th>\n                        <th>CAMPAIGN</th>\n                        <th>VIEW</th>\n                        <th>ACTIONS</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.renderTableRows()}\n                </tbody>\n            </table>\n        )\n    }\n\n    render () {\n        return (\n            <div className={'home'}>\n                <TitleBar/>\n                <div className={'content'}>\n                    <div className={'heading'}>MANAGE CAMPAIGNS</div>\n                    {this.renderTable()}\n                </div>\n            </div>\n            )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        home:state.home\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getAllCampaigns: () => {\n            dispatch(actions.getAllCampaigns());\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React, { Component } from 'react';\nimport { Provider } from \"react-redux\";\nimport {\n    BrowserRouter as Router,\n    Route\n} from 'react-router-dom';\nimport { store } from \"./store.js\";\nimport './../stylesheets/common.css';\nimport Home from '../views/home/home'\n\nclass App extends Component {\n  render() {\n      return (\n          <Provider store={store}>\n            <div>\n              <Router>\n                <div>\n                  <Route exact path=\"/\" component={Home}/>\n                </div>\n              </Router>\n            </div>\n          </Provider>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}